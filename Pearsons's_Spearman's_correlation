#This R script will give the Pearson’s & Spearman’s correlation between your replicates for the reads/gene. This is output to a text file.
######################################################################################
#wd = "/Users/brittany/Dropbox (GaTech)/Whiteley Lab Team Folder/Brittany/data_protocols_notebooks/TN-Seq/tnseq_concatonatedGenome_16_strand-22/abscess_sites"
#need to have a folder titled "QC_output" in this wd
#setwd(wd)
filenames <- dir(pattern = "-sites.txt")
filenames
##################################################################################################################
#Read in GFF file
#pfx means prefix and will be added to the input and output file name "smooth 1= first file in"
ctrl_pfx = "abscesstnseq"
ctrl_pfx
ctrl_reps = 19
ctrl_reps
gff_pfx = "GCF_000069185.1_ASM6918v1_genomic_combined.endtrunc_1"
gff_pfx
#tell R where your gff file is stored
#gff_dir = "/Volumes/Turtle/Bioinformatics/Analysis.Tnseq/Attempt.3/Currentwork/condataonated_fna/"
#gff_dir
out_pfx = "CPM_inorder_abscesstnseq_230508"
out_pfx

# make file called "QC_output"
write(out_pfx, file = paste("./QC_output/", paste(out_pfx, "_stats.txt", sep=""), sep=""))

#Read in file names
#put everything before teh -sites
#in_files = c("MW59-BR-Tn1_S1_MW104-S1_S1", "MW59-BR-Tn2_S2_MW104-S2_S2", "MW79-MAB-lib-S3_S3_MW104-MAB-lib-S3_S5", "MW79-MAB-lib-S4_S4_MW104-MAB-lib-S4_S6")
#in_files = c("MW59-BR-Tn3_S3_MW104-R1_S3", "MW59-BR-Tn4_S4_MW104-R2_S4", "MW79-MAB-lib-R3_S5_MW104-MAB-lib-R3_S7", "MW59-BR-Tn4_S4_MW104-R2_S4")
#in_files = c("sf_MW59-BR-Tn1_S1_MW104-S1_S1", "sf_MW59-BR-Tn2_S2_MW104-S2_S2", "sf_MW79-MAB-lib-S3_S3_MW104-MAB-lib-S3_S5", "sf_MW79-MAB-lib-S4_S4_MW104-MAB-lib-S4_S6","SRR13081055_GRslipstages5","SRR13081057_GRslipstages5","SRR13081061_GRslipstages5","SRR13081049_GRslipstages5","SRR13081056_GRslipstages5","SRR13081060_GRslipstages5","MW59-BR-Tn3_S3_MW104-R1_S3", "sg_MW59-BR-Tn4_S4_MW104-R2_S4", "MW79-MAB-lib-R3_S5_MW104-MAB-lib-R3_S7", "MW59-BR-Tn4_S4_MW104-R2_S4")
#all invitrotnseq
#in_files = c("sf_MW59-BR-Tn1_S1_MW104-S1_S1", "sf_MW59-BR-Tn2_S2_MW104-S2_S2", "sf_MW79-MAB-lib-S3_S3_MW104-MAB-lib-S3_S5", "sf_MW79-MAB-lib-S4_S4_MW104-MAB-lib-S4_S6", "sg_MW79-MAB-SF-in_S9", "sg_MW79-MAB-SE-in_S7","sg_MW81-MAB-SB-in_S6","rf_MW59-BR-Tn3_S3_MW104-R1_S3","rf_MW59-BR-Tn4_S4_MW104-R2_S4","rf_MW79-MAB-lib-R3_S5_MW104-MAB-lib-R3_S7","rf_MW79-MAB-lib-R4_S6_MW104-MAB-lib-R4_S8","rg_MW104-Rin1_S10","rg_MW79-MAB-RE-in_S8","rg_MW79-MAB-RF-in_S10" ,"sg_MW67-MAB-SIN_S9-REALLYRIN","rg_MW69-MAB-RIN_S9-REALLYSIN")
#alltnseq no sb its shit
#in_files = c("sf_MW59-BR-Tn1_S1_MW104-S1_S1", "sf_MW59-BR-Tn2_S2_MW104-S2_S2", "sf_MW79-MAB-lib-S3_S3_MW104-MAB-lib-S3_S5", "sf_MW79-MAB-lib-S4_S4_MW104-MAB-lib-S4_S6", "sg_MW79-MAB-SF-in_S9", "sg_MW79-MAB-SE-in_S7","sg_MW69-MAB-RIN_S9-REALLYSIN","rf_MW59-BR-Tn3_S3_MW104-R1_S3","rf_MW59-BR-Tn4_S4_MW104-R2_S4","rf_MW79-MAB-lib-R3_S5_MW104-MAB-lib-R3_S7","rf_MW79-MAB-lib-R4_S6_MW104-MAB-lib-R4_S8","rg_MW104-Rin1_S10","rg_MW79-MAB-RE-in_S8","rg_MW79-MAB-RF-in_S10" ,"rg_MW67-MAB-SIN_S9-REALLYRIN","ra_MW69-MAB-R1_S6","ra_MW69-MAB-R2_S7","ra_MW69-MAB-R3_S8","ra_MW70-MAB-R4_S8","ra_MW70-MAB-R5_S9","ra_MW71-MAB-R5_S7","sa_MW67-MAB-S1_S6","sa_MW67-MAB-S2_S7","sa_MW67-MAB-S3_S8","sa_MW70-MAB-S4_S6","sa_MW70-MAB-S5_S7","sa_MW71-MAB-S6_S6")
#abscess
in_files = c("Sin_MW79-MAB-SE-in_S7","Sin_MW79-MAB-SF-in_S9","Sin_MW69-MAB-RIN_S9-REALLYSIN","Sabs_MW69-MAB-R1_S6","Sabs_MW69-MAB-R2_S7","Sabs_MW69-MAB-R3_S8","Sabs_MW70-MAB-R4_S8","Sabs_MW70-MAB-R5_S9","Sabs_MW71-MAB-R5_S7","Rin_MW79-MAB-RE-in_S8","Rin_MW79-MAB-RF-in_S10","Rin_MW104-Rin1_S10","Rin_MW67-MAB-SIN_S9-REALLYRIN","Rabs_MW67-MAB-S1_S6","Rabs_MW67-MAB-S2_S7","Rabs_MW67-MAB-S3_S8","Rabs_MW70-MAB-S4_S6","Rabs_MW70-MAB-S5_S7","Rabs_MW71-MAB-S6_S6")
in_files

##################################################################################################################
# Read in sites files
library(dplyr)
sites <- data.frame(Pos=c(0)) 
for (i in 1:length(in_files)) {
newsites <- read.table(paste(paste(in_files[i], sep="/"), "sites.txt", sep="-")) 
colnames(newsites) <- c(paste("V", i, sep=""), "Pos")
#newsites <- tail(newsites, n=-to_trim) #uncomment if to_trim=0
newsites <- arrange(newsites,Pos)
sites <- merge(sites, newsites, all=T) 
}
sites <- tail(sites, n=-1)
sites[is.na(sites)] <- 0

##################################################################################################################
# Initialize the list of genes, determine genome length
#setwd(gff_dir)
#can add column names if your gff has extra columns
gff <- read.delim(file=paste(gff_pfx, ".gff", sep=""), sep="\t", fill=TRUE, header=FALSE, col.names = c("seqname", "source", "feature", "start", "end", "score", "strand", "frame", "att"))
#setwd(wd)
print(head(gff))
gff <- tail(gff, n=-7) #if gff has extra info at top
gff <- gff[(gff$feature=="gene"),]
print(head(gff))



library(DESeq2)
library(tidyverse)
colData <- data.frame(c(rep(ctrl_pfx, ctrl_reps)), condition = rep("untreated", ctrl_reps))
sitescds <- sites[,2:length(sites)] %>% round %>% DESeqDataSetFromMatrix(colData = colData, design= ~ 1) #makes data in deseq dataframe

#Output the normalized counts Multiple options

#Output the estimateSizeFactors normalized counts
sitescds <- estimateSizeFactors(sitescds) #need this if normalize in next line =T
counts.norm <- counts(sitescds, normalized=T) #norm=T implements estimateSizeFactors normalization
rownames(counts.norm) <- sites$Pos# says that the row names will be the sites pos
counts.df <- data.frame(counts.norm)#turns vetor into a dataframe

#Output the CPM normalized counts
#library(edgeR)
#sitescds3 <-cpm(sitescds, normalizes.lib.sizes=TRUE,log=FALSE)
#rownames(sitescds3) <- sites$Pos
#counts.df <- data.frame(sitescds3)
	
controlreps <- 0
for (c in 1:length(counts.df[1,])) {
gff[,c+9] <- rep(1,length(gff[,1]))
controlreps <- controlreps + 1
colnames(gff)[c+9] <- paste(ctrl_pfx, controlreps, sep=".")
}

# Output gene boundaries and read counts per Tn site for Perl binning script
print("Binning read counts by gene boundaries")
boundariesfile <- paste("./QC_Output/", paste(out_pfx, ".boundaries.tsv", sep=""), sep="")
sitecountsfile <- paste("./QC_Output/", paste(out_pfx, ".sitecounts.tsv", sep=""), sep="")
write.table(gff[,c(4,5, 10:length(gff))], boundariesfile, quote=FALSE, sep="\t", row.names=F)
write.table(counts.df, sitecountsfile, quote=FALSE, sep="\t", row.names=T)

#Use perl script to bin sites into genes
#You will need to change the line below to where your TnGeneBin.pl script is kept or place it in the file where your input files are at
#
system(paste("perl TnGeneBin.pl", boundariesfile, sitecountsfile))        
#gets rid of gene ID columns so they dont mess up further analysis 
genecounts <- read.table(paste(boundariesfile, "out", sep="."), header=T)[,-c(1,2)]
#keeps first two columns for viewing 
genecounts2 <- read.table(paste(boundariesfile, "out", sep="."), header=T)
#both samples hits per gene
write.table(genecounts2, "All_sitecountsboundaries.tsv", quote=FALSE, sep="\t", row.names=F)
numsites <- read.table(paste(boundariesfile, "numsites.out", sep="."), header=T)[,-c(1,2)]
numsites <- read.table(paste(boundariesfile, "numsites.out", sep="."), header=T)[,-c(1,2)]

##################if want stats on files with the reads
#calcluate pearson's coefficient:
pearsonsrho <- cor(genecounts, use= "pairwise.complete.obs", method = "pearson")
print(pearsonsrho)
spearmansrho <- cor(genecounts, use= "pairwise.complete.obs", method = "spearman")
print(spearmansrho)

write(paste("Pearson's Rho:"), file = paste("./QC_output/", paste(out_pfx, "_stats.txt", sep=""), sep=""), append = TRUE)
write.table(pearsonsrho, sep= "\t" , file = paste("./QC_output/", paste(out_pfx, "_stats.txt", sep=""), sep=""), append = TRUE)
write(paste("Spearman's Rho:"), file = paste("./QC_output/", paste(out_pfx, "_stats.txt", sep=""), sep=""), append = TRUE)
write.table(spearmansrho, sep= "\t" , file = paste("./QC_output/", paste(out_pfx, "_stats.txt", sep=""), sep=""), append = TRUE)

